<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Collections.Generic" #>

<#+
   public partial class T4FileManager
    {
        /// <summary>
        /// The interface for the host that transforms text template.
        /// </summary>
        private readonly ITextTemplatingEngineHost host;

        /// <summary>
        /// Object for Visual Studio core automation.
        /// </summary>
        private readonly DTE dte;

        /// <summary>
        /// Object for logging.
        /// </summary>
        private readonly Logger logger;

        /// <summary>
        /// Code to generate as <see cref="StringBuilder"/>.
        /// </summary>
        private readonly StringBuilder textTransformation;

        /// <summary>
        /// Files to be generated.
        /// </summary>
        private readonly List<FileToGenerate> filesToGenerate;

        /// <summary>
        /// Information about the generated files.
        /// </summary>
        private readonly GeneratedInfo generatedInfo;

        /// <summary>
        /// Uniform header block for generating the files.
        /// </summary>
        private string headerBlock;

        /// <summary>
        /// Information about the current file to be generated.
        /// </summary>
        private FileToGenerate currentFileToGenerate;

        /// <summary>
        /// Switch to write log of generation to main output file.
        /// </summary>
        /// <value>Default value is false.</value>
        private bool isLogToMainOutputFileEnabled;

        /// <summary>
        /// Allow overwriting of files if it has already been generated.
        /// </summary>
        /// <value>Default value is true.</value>
        private bool canOverwriteExistingFile;

        /// <summary>
        /// Automatic indentation of the code.
        /// </summary>
        /// <value>Default value is false.</value>
        private bool isAutoIndentEnabled;

        /// <summary>
        /// Enable Placeholder-Content for main output file to avoiding generation of empty .cs file 
        /// and ignoring of the output extension directive in .net core projects.
        /// </summary>
        /// <value>Default value is true.</value>
        private bool isNetCorePlaceholderContentEnabled;

        /// <summary>
        /// Automatic indentation of the code with ReSharper.
        /// </summary>
        /// <value>Default value is false.</value>
        private bool isAutoCleanUpWithResharperEnabled;

        /// <summary>
	    /// Defines Encoding format for generated output file. (Default UTF8)
	    /// </summary>
	    /// <returns></returns>
	    private System.Text.Encoding Encoding;

        /// <summary>
        /// Link generating files to template placeholder in solution.
        /// </summary>
        /// <value>Default value is false.</value>
        private bool linkGeneratingFilesToTemplatePlaceholder;

        /// <summary>
        /// Link info.json file to solution.
        /// </summary>
        /// <value>Default value is false.</value>
        private bool linkJsonFileToSolution;

        /// <summary>
        /// Empty template placeholder extention
        /// </summary>
        /// <value>Default value is .txt4.</value>
        private string emptyTemplatePlaceHolderExtention;

        /// <summary>
        /// Set default .txt extention to main output file
        /// </summary>
        /// <value>Default value is true</value>
        private bool setDefaultExtention;

        /// <summary>
        /// Constructor for the instantiation of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="GeneratedTextTransformation"/>.</param>
        public T4FileManager(GeneratedTextTransformation textTransformation)
        : this(textTransformation.GenerationEnvironment, textTransformation.Host, new T4FileManagerOptions()) {}

        /// <summary>
        /// Constructor for the instantiation of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="GeneratedTextTransformation"/>.</param>
        /// <param name="options">The generation options <see cref="T4FileManagerOptions"/>.</param>
        public T4FileManager(GeneratedTextTransformation textTransformation,T4FileManagerOptions options)
        : this(textTransformation.GenerationEnvironment, textTransformation.Host, options) {}

        /// <summary>
        /// Constructor for the instantiation of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="StringBuilder"/>.</param>
        /// <param name="host">The interface for the host that transforms text template.</param>
        /// <param name="options">The generation options <see cref="T4FileManagerOptions"/>.</param>
        public T4FileManager(StringBuilder textTransformation, ITextTemplatingEngineHost host, T4FileManagerOptions options)
        {
            this.textTransformation = textTransformation;
            this.host = host;

            if (options == null)
                options = new T4FileManagerOptions();

            isLogToMainOutputFileEnabled = options.IsLogToMainOutputFileEnabled;
            canOverwriteExistingFile = options.CanOverwriteExistingFile;
            isAutoIndentEnabled = options.IsAutoIndentEnabled;
            isNetCorePlaceholderContentEnabled = options.IsNetCorePlaceholderContentEnabled;
            isAutoCleanUpWithResharperEnabled = options.IsAutoCleanUpWithResharperEnabled;
            Encoding = options.Encoding;
            linkGeneratingFilesToTemplatePlaceholder = options.LinkGeneratingFilesToTemplatePlaceholder;
            linkJsonFileToSolution = options.LinkJsonFileToSolution;
            emptyTemplatePlaceHolderExtention = options.EmptyTemplatePlaceHolderExtention;
            setDefaultExtention = options.SetDefaultExtention;

            // prevent "error generating output" in ide, if output extension not set
            if (this.setDefaultExtention)
            {
                this.host.SetFileExtension(".txt");
            }

            this.filesToGenerate = new List<FileToGenerate>();
            this.generatedInfo = new GeneratedInfo();
            this.dte = GetHostServiceProvider();
            this.logger = new Logger(this.dte, Path.GetFileName(this.host.TemplateFile));
        }

        /// <summary>
        /// Create instance of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="GeneratedTextTransformation"/>.</param>
        public static T4FileManager Create(GeneratedTextTransformation textTransformation)
        {
            return new T4FileManager(textTransformation);
        }

        /// <summary>
        /// Create instance of the FileManager.
        /// </summary>
        /// <param name="textTransformation">Code to generate as <see cref="GeneratedTextTransformation"/>.</param>
        /// <param name="options">The generation options <see cref="T4FileManagerOptions"/>.</param>
        public static T4FileManager Create(GeneratedTextTransformation textTransformation, T4FileManagerOptions options)
        {
            return new T4FileManager(textTransformation, options);
        }

        /// <Summary>
        /// Workaround: set invalid file extension to prevent generation of template main output file (Suggessted by Eagle3386)
        /// Produces the warning A custom tool 'TextTemplatingFileGenerator' is associated with file '*.tt', but the output of the 
        /// custom tool was not found in the project.
        /// </Summary>
        public T4FileManager DisableTemplateMainOutputFile()
        {
            this.logger.Information("TemplateMainOutputFile disabled");
            this.host.SetFileExtension("/");
            return this;
        }

        /// <Summary>
        /// Change switch CanOverwriteExistingFile to false
        /// </Summary>
        public T4FileManager DisableOverwriteExistingFile()
        {
            this.logger.Information("CanOverwriteExistingFile is disabled (false)");
            this.canOverwriteExistingFile = false;
            return this;
        }

        public T4FileManager SetOutputFileEncoding(System.Text.Encoding encoding)
        {
            this.logger.Information("Encoding is set to " + encoding.HeaderName);
            this.Encoding = encoding;
            return this;
        }

        /// <Summary>
        /// Change switch IsAutoCleanUpWithResharperEnabled to true
        /// </Summary>
        public T4FileManager EnableCleanUpWithResharper()
        {
            this.logger.Information("IsAutoCleanUpWithResharperEnabled is enabled (true)");
            this.isAutoCleanUpWithResharperEnabled = true;
            return this;
        }

        /// <Summary>
        /// Change switch IsAutoIndentEnabled to true
        /// </Summary>
        public T4FileManager EnableAutoIndent()
        {
            this.logger.Information("IsAutoIndentEnabled is enabled (true) / VS Format Document Shortcut");
            this.isAutoIndentEnabled = true;
            return this;
        }

        /// <Summary>
        /// Write log information to the main output file in addtion to the active visual studio output window.
        /// </Summary>
        public T4FileManager EnableLog()
        {
            this.logger.Information("Log to main output file enabled");
            this.isLogToMainOutputFileEnabled = true;
            return this;
        }

        /// <summary>
        /// Clear current code input for starting header block.
        /// </summary>
        public void StartHeader()
        {
            this.logger.Information("Header started");
            this.textTransformation.Clear();
        }

        /// <summary>
        /// Set code as header block and empty code input.
        /// </summary>
        public void FinishHeader()
        {
            this.logger.Information("FinishHeader, {0} chars removed from main output", this.textTransformation.Length); 
            this.headerBlock = this.textTransformation.ToString();
            this.textTransformation.Remove(0, this.textTransformation.Length);
        }

        /// <summary>
        /// Alternative method to finish header block.
        /// </summary>
        public void EndBlock()
        {
            FinishHeader();
        }

        /// <summary>
        /// Empty header block.
        /// </summary>
        public void ClearHeader()
        {
            this.logger.Information("ClearHeader called"); 
            this.headerBlock = null;
        }

        public void Log(string info)
        {
            this.logger.Information(info);
        }

        public void Log(string info, params object[] param)
        {
            this.logger.Information(info, param);
        }

        /// <summary>
        /// A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        public void StartNewFile(string filename, string project, string path)
        {
            StartNewFile(filename, project, path, null);
        }


        /// <summary>
        /// A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>
        public void StartNewFile(string filename, string project, string path, FileProperties properties)
        {
            CreateNewFile(filename, project, path, properties);
        }

        /// <summary>
        /// A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        public void CreateNewFile(string filename, string project, string path)
        {
            CreateNewFile(filename, project, path, null);
        }


        /// <summary>
        ///  A new file will be started. The generated code that was before this method is added to the last file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>
        public void CreateNewFile(string filename, string project, string path, FileProperties properties)
        {
            this.logger.Information("Begin CreateNewFile {0}", filename);
            if (this.currentFileToGenerate != null && !string.IsNullOrEmpty(this.currentFileToGenerate.Filename))
            {
                this.logger.Information("Finish previous file");
                FinishFile();
            }

            var formattedPath = path == null ? null : path.Replace(Path.AltDirectorySeparatorChar, Path.DirectorySeparatorChar);
            this.logger.Information("Formatted path set {0}", formattedPath);

            properties = properties ?? new FileProperties();

            this.currentFileToGenerate = new TextFileToGenerate
            {
                Filename = filename,
                Path = formattedPath,
                Properties = properties.ToDictionary(),
                Project = project
            };

            this.textTransformation.Clear();
            this.logger.Information("End CreateNewFile {0}", filename);
        }

        /// <summary>
        ///  A new binary file will be created. The binary will be placed in file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="filename"> The binary content to save.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>

        public void CreateResourceFile(string filename, byte[] content, string project, string path)
        {
            CreateResourceFile(filename, content, project, path, null);
        }

        /// <summary>
        ///  A new binary file will be created. The binary will be placed in file.
        /// </summary>
        /// <param name="filename">The file name for the generated file.</param>
        /// <param name="filename"> The binary content to save.</param>
        /// <param name="project">Project name where the file is generated.</param>
        /// <param name="path">Subfolder within the project where the file is generated.</param>
        /// <param name="properties">Settings that can be defined for the generated file.</param>

        public void CreateResourceFile(string filename, byte[] content, string project, string path, FileProperties properties)
	    {
		    this.logger.Information("Begin CreateResourceFile {0}", filename);
            if (this.currentFileToGenerate != null && !string.IsNullOrEmpty(this.currentFileToGenerate.Filename))
            {
                this.logger.Information("Finish previous file");
                FinishFile();
            }

            var formattedPath = path == null ? null : path.Replace(Path.AltDirectorySeparatorChar, Path.DirectorySeparatorChar);
            this.logger.Information("Formatted path set {0}", formattedPath);

            properties = properties ?? new FileProperties() 
            {
                CustomTool = "",
                BuildAction = BuildAction.EmbeddedResource,
                CopyToOutputDirectory = CopyToOutputDirectory.DoNotCopy
            };

            this.currentFileToGenerate = new BinaryFileToGenerate
            {
                Filename = filename,
                Path = formattedPath,
                Properties = properties.ToDictionary(),
                Project = project,
                BinaryContent = content
            };

            this.textTransformation.Clear();
            this.logger.Information("End CreateResourceFile {0}", filename);
	  }

        /// <summary>
        /// The generated file is finished.
        /// </summary>
        public void FinishFile()
        {
            this.logger.Information("Begin FinishFile");
            string directory = null;

            if (!string.IsNullOrEmpty(this.currentFileToGenerate.Project))
            {
                directory = this.GetProjectDirectoryPath(this.currentFileToGenerate.Project);
                this.logger.Information("Filepath {0} to project {1} for file {2}", directory, this.currentFileToGenerate.Project, this.currentFileToGenerate.Filename);
            }

            directory = directory ?? this.GetTemplateFileProjectDirectoryPath();

            if (!string.IsNullOrEmpty(this.currentFileToGenerate.Path))
            {
                directory = Path.Combine(directory, this.currentFileToGenerate.Path);
                this.logger.Information("Filepath {0} to solution dir {1} for file {2}", directory, this.currentFileToGenerate.Project, this.currentFileToGenerate.Filename);
            }

            this.currentFileToGenerate.AbsolutePath = directory;

            var header = this.headerBlock;
            if (string.IsNullOrEmpty(header) == false)
            {
                header = this.headerBlock.Replace("$filename$", this.currentFileToGenerate.Filename);
            }

            if (this.currentFileToGenerate is TextFileToGenerate textFile)
                textFile.Content = this.textTransformation.Insert(0, header).ToString();
            
            this.filesToGenerate.Add(this.currentFileToGenerate);
            this.logger.Information("File {0} added to list", this.currentFileToGenerate.Filename);

            this.logger.Information("File content ({0} chars) removed from main text transformation", this.textTransformation.Length);
            this.textTransformation.Remove(0, this.textTransformation.Length);

            this.currentFileToGenerate = new TextFileToGenerate();
            this.logger.Information("End FinishFile");
        }

        /// <summary>
        /// <see cref="Generate"/>
        /// </summary>
        public void Process()
        {
            this.Generate();
        }

        /// <summary>
        /// Files are generated. Old files are cleaned up. Info file is created.
        /// </summary>
        public void Generate()
        {
            var stopWatch = new Stopwatch();
	        stopWatch.Start();

            this.logger.Information("Start Generate");
            if (this.currentFileToGenerate != null && !string.IsNullOrEmpty(this.currentFileToGenerate.Filename))
            {
                this.logger.Information("Finish last file");
                FinishFile();
            }

            var templateFile = Path.ChangeExtension(this.host.TemplateFile, ".info.json");
            GeneratedInfo filesInfoFromPreviousRun = null;

            if (File.Exists(templateFile))
            {
                var content = File.ReadAllText(templateFile);
                filesInfoFromPreviousRun = JsonConvert.DeserializeObject<GeneratedInfo>(content);
                this.logger.Information("Infos loaded from last run {0}", Path.GetFileName(templateFile));
            }

            this.textTransformation.Clear();

            foreach (var fileToGenerate in this.filesToGenerate)
            {
                
                if (fileToGenerate is BinaryFileToGenerate binaryFile)
                    this.GenerateNewFile(binaryFile);

                else if (fileToGenerate is TextFileToGenerate textFile)
                    this.GenerateNewFile(textFile);

                else 
                    throw new ArgumentOutOfRangeException("FileToGenerate has unexpected type");

                this.GenerateNewFileForSolution(fileToGenerate);
            }

            this.logger.Information("{0} files generated", this.filesToGenerate.Count);
            this.DeleteExistingFiles(filesInfoFromPreviousRun);

            this.generatedInfo.FilesToGenerate = this.filesToGenerate;

            File.WriteAllText(templateFile, JsonConvert.SerializeObject(this.generatedInfo, Newtonsoft.Json.Formatting.Indented), Encoding.UTF8);

            this.logger.Information("New info file {0} created", Path.GetFileName(templateFile));
            this.logger.Information("End Generate");

            if (this.linkJsonFileToSolution)
            {
                var originaleTemplateItem = this.dte.Solution.FindProjectItem(this.host.TemplateFile);
                originaleTemplateItem.ProjectItems.AddFromFile(templateFile);
                this.logger.Information("Info file {0} linked to solution item", Path.GetFileName(templateFile));
            }
            
            stopWatch.Stop();
            this.logger.Information("Duration: {0:h\\:mm\\:ss\\.fffff}", stopWatch.Elapsed);

            if (this.isLogToMainOutputFileEnabled)
            {
                this.textTransformation.Append(this.logger.Log);
            }
			
            if (this.isNetCorePlaceholderContentEnabled)
            {
                this.textTransformation.Append(".NET Core placeholder content to avoid ignoring the output extension directive");
            }
        }

        /// <summary>
        /// Physical generation of the file.
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFile(TextFileToGenerate textFileToGenerate)
        {
            Directory.CreateDirectory(textFileToGenerate.AbsolutePath);

            var filePath = Path.Combine(textFileToGenerate.AbsolutePath, textFileToGenerate.Filename);

            if (this.isAutoIndentEnabled || this.isAutoCleanUpWithResharperEnabled)
            {
                textFileToGenerate.Content = textFileToGenerate.Content.Insert(0, " ");
            }

            var canOverwriteExistingFile = CanOverwriteExistingFileByFile(textFileToGenerate);

            if ((canOverwriteExistingFile && this.canOverwriteExistingFile) || !File.Exists(filePath))
            {
                File.WriteAllText(Path.Combine(textFileToGenerate.AbsolutePath, textFileToGenerate.Filename), textFileToGenerate.Content, this.Encoding);
                this.logger.Information("Text file {0} written", textFileToGenerate.Filename);
            }
        }

        /// <summary>
        /// Physical generation of the file.
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFile(BinaryFileToGenerate binaryFileToGenerate)
        {
            Directory.CreateDirectory(binaryFileToGenerate.AbsolutePath);

            var filePath = Path.Combine(binaryFileToGenerate.AbsolutePath, binaryFileToGenerate.Filename);

            var canOverwriteExistingFile = CanOverwriteExistingFileByFile(binaryFileToGenerate);

            if ((canOverwriteExistingFile && this.canOverwriteExistingFile) || !File.Exists(filePath))
            {
                File.WriteAllBytes(Path.Combine(binaryFileToGenerate.AbsolutePath, binaryFileToGenerate.Filename), binaryFileToGenerate.BinaryContent);
            }
            this.logger.Information("Binary file {0} written", binaryFileToGenerate.Filename);
        }

        /// <summary>
        /// Check whether a file may be overwritten.
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        /// <returns>Overwriting allowed or not as <see cref="bool"/>.</returns>
        private bool CanOverwriteExistingFileByFile(FileToGenerate fileToGenerate)
        {
            if (fileToGenerate.Properties.ContainsKey(Property.CanOverwriteExistingFile))
            {
                var value = fileToGenerate.Properties[Property.CanOverwriteExistingFile] as bool?;
                if (value == false)
                {
                    this.logger.Information("Can't overwrite file " + fileToGenerate.Filename);
                    return false;
                }
            }

            this.logger.Information("File {0} will be overwritten", fileToGenerate.Filename);
            return true;
        }

        /// <summary>
        /// Add file to the solution and execute the shortcuts (example: Resharper Clean Up).
        /// </summary>
        /// <param name="fileToGenerate">File information.</param>
        private void GenerateNewFileForSolution(FileToGenerate fileToGenerate)
        {
            this.logger.Information("Begin GenerateNewFileForSolution");
            var exists = this.HasProjectItem(fileToGenerate.AbsolutePath, fileToGenerate.Filename);

            this.AddMissingFileToProject(fileToGenerate.Project, fileToGenerate.AbsolutePath, fileToGenerate.Filename);

            var fileProjectItem = this.FindProjectItem(fileToGenerate.Project, fileToGenerate.Filename);

            var canOverwriteExistingFile = CanOverwriteExistingFileByFile(fileToGenerate);

            if (fileToGenerate.Properties != null && (canOverwriteExistingFile && this.canOverwriteExistingFile) || !exists)
            {
                if (fileToGenerate.Properties != null)
                {
                    foreach (var property in fileToGenerate.Properties)
                    {
                        if (property.Key == Property.CanOverwriteExistingFile)
                        {
                            continue;
                        }

                        this.logger.Information("Set property key/value pair {0}/{1}", property.Key, property.Value);
                        this.SetPropertyValue(fileProjectItem, property.Key, property.Value);
                    }
                }

                if (this.isAutoIndentEnabled)
                {
                    this.logger.Information("AutoIndent is enabled for file");
                    this.FormatProjectItem(fileProjectItem);
                }

                if (this.isAutoCleanUpWithResharperEnabled)
                {
                    this.logger.Information("AutoCleanup with resharper is enabled for file");
                    this.FormatProjectItemWithResharper(fileProjectItem);
                }
            }

            this.logger.Information("End GenerateNewFileForSolution");
        }

        /// <summary>
        /// Clean up the old files.
        /// </summary>
        private void DeleteExistingFiles(GeneratedInfo filesInfoFromPreviousRun)
        {
            this.logger.Information("Start DeleteExistingFiles");

            if (filesInfoFromPreviousRun == null || filesInfoFromPreviousRun.HasContent() == false || this.canOverwriteExistingFile == false)
            {
                this.logger.Information("Cancel DeleteExistingFiles (no files from previous run and CanOverwriteExistingFile: {0}", this.canOverwriteExistingFile);
                return;
            }

            foreach (var file in filesInfoFromPreviousRun.FilesToGenerate)
            {
                string directory = null;

                if (!string.IsNullOrEmpty(file.Project))
                {
                    directory = this.GetProjectDirectoryPath(file.Project);
                }

                directory = directory ?? this.GetTemplateFileProjectDirectoryPath();

                if (!string.IsNullOrEmpty(file.Path))
                {
                    directory = Path.Combine(directory, file.Path);
                }

                var filePath = Path.Combine(directory, file.Filename);

                if (!this.filesToGenerate.Any(x => x.Project == file.Project
                                                    && x.Filename == file.Filename
                                                    && x.Path == file.Path
                                                    && CanOverwriteExistingFileByFile(x)))
                {
                    File.Delete(filePath);
                    this.RemoveFileFromProject(directory, file.Filename);
                    this.logger.Information("Dirty file {0} removed", filePath);
                }
            }

            this.logger.Information("End DeleteExistingFiles");
        }

        /// <summary>
        /// Execute Resharper cleanup task.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        private void FormatProjectItemWithResharper(ProjectItem item)
        {
            this.ExecuteVsCommand(item, "ReSharper.ReSharper_SilentCleanupCode");
        }

        /// <summary>
        /// Execute Visual Studio Format Document task.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        private void FormatProjectItem(ProjectItem item)
        {
            this.ExecuteVsCommand(item, "Edit.FormatDocument");
        }

        /// <summary>
        /// Execute Visual Studio commands.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        /// <param name="command">Commands as <see cref="string"/>.</param>
        private void ExecuteVsCommand(ProjectItem item, params string[] command)
        {
            if (item == null)
            {
                throw new ArgumentNullException("item");
            }

            if (item.IsOpen)
            {
                item.Document.Close(vsSaveChanges.vsSaveChangesNo);
            }

            item.Open();

            foreach (var cmd in command)
            {
                if (string.IsNullOrWhiteSpace(cmd) == true)
                {
                    continue;
                }

                TryToExecuteCommand(item, cmd, false, 1);
            }

            item.Document.Close(vsSaveChanges.vsSaveChangesYes);
            this.logger.Information("VS command {0} executed", command);
        }

        /// <summary>
        /// Recursive try to execute Visual Studio commands.
        /// </summary>
        /// <param name="item"><see cref="ProjectItem"/>.</param>
        /// <param name="command">Command as <see cref="string"/>.</param>
        /// <param name="finished">Evaluate whether command was executed.</param>
        /// <param name="attempt">Number of attempts.</param>
        private void TryToExecuteCommand(ProjectItem item, string command, bool finished, int attempt)
        {
            System.Threading.Thread.Sleep(250);
            this.logger.Information("TryToExecuteCommand {0}, attempt: {1}", command, attempt);

            if (finished)
            {
                return;
            }

            try
            {
                item.Document.ActiveWindow.SetFocus();
                this.dte.ExecuteCommand(command, String.Empty);
                finished = true;
            }
            catch (Exception exception)
            {
                if (exception.Message.Contains("Command") && exception.Message.Contains("is not valid"))
                {
                    return;
                }

                finished = false;
            }

            if (item.Document.Saved == true)
            {
                finished = false;
            }

            if (attempt == 25)
            {
                this.logger.Information("TryToExecuteCommand {0} failed");
                return;
            }

            attempt++;

            TryToExecuteCommand(item, command, finished, attempt);
        }


        /// <summary>
        /// Find the project item in the solution.
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <param name="filename">Filename with extension.</param>
        /// <returns></returns>
        private ProjectItem FindProjectItem(string projectName, string filename)
        {
            if (string.IsNullOrEmpty(projectName))
            {
                var projItem = this.dte.Solution.FindProjectItem(this.host.TemplateFile);
                var prj = projItem.ContainingProject;
                projectName = prj.Name;
            }
            
            return dte.Solution.FindProjectItem(filename);
        }

        /// <summary>
        /// Make sure that the project item is searched everywhere and that it is a project.
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <returns><see cref="Project"/>.</returns>
        private Project FindProjectByName(string projectName)
        {
            Project foundProject = null;

            var list = new List<Project>();
            list.AddRange(this.dte.Solution.Projects.Cast<Project>());

            for (int i = 0; i < list.Count; i++)
            {
                if (list[i].ProjectItems != null)
                {
                    list.AddRange(list[i].ProjectItems.Cast<ProjectItem>().Select(x => x.SubProject).OfType<Project>());
                }
            }

            foreach (Project project in list)
            {
                if (project.Name == projectName)
                {
                    foundProject = project;
                    break;
                }
            }

            if (foundProject == null)
            {
                throw new InvalidOperationException($"Project {projectName} not exists in the solution.");
            }

            return foundProject;
        }

        /// <summary>
        /// Get the path of the folder where the solution is located.
        /// </summary>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetSolutionDirectoryPath()
        {
            var fullName = this.dte.Solution.FullName;

            var directory = Path.GetDirectoryName(fullName);

            return directory;
        }

        /// <summary>
        /// Get the path of the folder where this file is located.
        /// </summary>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetTemplateFileProjectDirectoryPath()
        {
            var currentProjectName = this.dte.Solution.FindProjectItem(this.host.TemplateFile).ContainingProject.Name;

            var project = this.FindProjectByName(currentProjectName);

            var directory = Path.GetDirectoryName(project.FullName);

            return directory;
        }

        /// <summary>
        /// Get the full path of a project item.
        /// </summary>
        /// <param name="projectItem"><see cref="ProjectItem"/>.</param>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetProjectItemPath(ProjectItem projectItem)
        {
            var path = projectItem
                .Properties
                .Item("FullPath")
                .Value
                .ToString();

            return path;
        }

        /// <summary>
        /// Get the path of the folder where project item is located.
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <returns>Path as <see cref="string"/>.</returns>
        private string GetProjectDirectoryPath(string projectName)
        {
            var project = this.FindProjectByName(projectName);

            var directory = Path.GetDirectoryName(project.FullName);

            return directory;
        }

        /// <summary>
        /// Get interface for the host that transforms text template.
        /// </summary>
        /// <returns><see cref="dte"/></returns>
        private DTE GetHostServiceProvider()
        {
            var hostServiceProvider = this.host as IServiceProvider;

            DTE dteHost = null;

            if (hostServiceProvider != null)
            {
                dteHost = hostServiceProvider.GetCOMService(typeof(DTE)) as DTE;
            }

            return dteHost;
        }

        /// <summary>
        /// Adding a file to the solution (.NET Full Framework stuff).
        /// </summary>
        /// <param name="projectName">Project name without extension.</param>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        private void AddMissingFileToProject(string projectName, string absolutePath, string fileName)
        {
            
            if (string.IsNullOrEmpty(projectName))
            {
                var originaleTemplateItem = this.dte.Solution.FindProjectItem(this.host.TemplateFile);
                var templatePrj = originaleTemplateItem.ContainingProject;
                projectName = templatePrj.Name;
            }

            var projectItems = this.FindProjectByName(projectName).ProjectItems;
            var exists = this.HasProjectItem(absolutePath, fileName);

            if (exists)
                return;

            if (this.linkGeneratingFilesToTemplatePlaceholder)
            {
                LinkFileToTemplatePlaceHolder(projectItems, absolutePath, fileName);
                return;
            }
            
            var combinedPath = Path.Combine(absolutePath, fileName);
            projectItems.AddFromFile(combinedPath);
            this.logger.Information("File {0} link to {1} project item", combinedPath, projectName);
        }

        /// <summary>
        /// Check if Project item exists.
        /// </summary>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        /// <returns></returns>
        private bool HasProjectItem(string absolutePath, string fileName)
        {
            var combinedPath = Path.Combine(absolutePath, fileName);
            var exists = this.dte.Solution.FindProjectItem(combinedPath) != null;
            return exists;
        }

        /// <summary>
        /// Link file to exist template or template placeHolder in different project or directory.
        /// </summary>
        /// <param name="projectItems">Items of project to add file and template placeholder</param>
        /// <param name="absolutePath">Absolute path of file.</param>
        /// <param name="fileName">Filename with extension.</param>
        /// <returns></returns>
        private void LinkFileToTemplatePlaceHolder(ProjectItems projectItems, string absolutePath, string fileName)
        {
            var samePath = string.Equals(this.GetTemplateFileProjectDirectoryPath(), absolutePath, StringComparison.OrdinalIgnoreCase);
            var templateName = GetTemplatePlaceholderName(this.host.TemplateFile);
            var templatePath = samePath ? this.host.TemplateFile : Path.Combine(absolutePath, templateName);
            var templateItem = this.dte.Solution.FindProjectItem(templatePath);
            if (templateItem == null)
            {
                if (!File.Exists(templatePath))
                    File.Create(templatePath).Dispose();

                templateItem = projectItems.AddFromFile(templatePath);
                this.logger.Information("Template placeHolder project item {0} created", templatePath);
            }

            var combinedPath = Path.Combine(absolutePath, fileName);
            templateItem.ProjectItems.AddFromFile(combinedPath);
            this.logger.Information("File {0} link to {1} template item", combinedPath, templatePath);
        }

        /// <summary>
        /// Generate new template placeholder name
        /// </summary>
        /// <param name="fileName">Template file name with extension.</param>
        /// <returns></returns>
        private string GetTemplatePlaceholderName(string fileName)
		{
			return Path.GetFileName(Path.ChangeExtension(fileName, this.emptyTemplatePlaceHolderExtention));
		}


        /// <summary>
        /// Remove Project item from the Solution.
        /// </summary>
        /// <param name="projectPath">Absolute path of project.</param>
        /// <param name="fileName">Filename with extension.</param>
        private void RemoveFileFromProject(string projectPath, string fileName)
        {
            var combinedPath = Path.Combine(projectPath, fileName);

            var item = this.dte.Solution.FindProjectItem(combinedPath);

            if (item != null)
            {
                item.Remove();
            }
        }

        /// <summary>
        /// Set setting if available.
        /// </summary>
        /// <param name="projectItem"><see cref="ProjectItem"/>.</param>
        /// <param name="propertyName">Property name as <see cref="string"/>.</param>
        /// <param name="value">Value as <see cref="object"/>.</param>
        private void SetPropertyValue(ProjectItem projectItem, string propertyName, object value)
        {

            this.logger.Information("property {0} exists", propertyName);

            var property = projectItem.Properties.Item(propertyName);

            if (property != null)
            {
                this.logger.Information("property {0} exists", propertyName);
                property.Value = value;
            }
        }
    }

    /// <summary>
    /// Properties for project item
    /// </summary>
    public sealed class FileProperties
    {
        public FileProperties()
        {
            this.TemplateParameter = new Dictionary<string, object>();
        }

        public string CustomTool { get; set; }
        public int? CopyToOutputDirectory { get; set; }
        public int? BuildAction { get; set; }
        public Dictionary<string, object> TemplateParameter { get; set; }

        internal string BuildActionString
        { 
            get
            { 
                return this.BuildAction.ToString();
            }
        }

        internal Dictionary<string, object> ToDictionary()
        {
            var propertyDictionary = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(this.CustomTool))
            {
                propertyDictionary.Add(Property.CustomTool, this.CustomTool);
            }

            if (this.CopyToOutputDirectory.HasValue)
            {
                propertyDictionary.Add(Property.CopyToOutputDirectory, this.CopyToOutputDirectory.Value);
            }

            if (this.BuildAction.HasValue)
            {
                propertyDictionary.Add(Property.BuildAction, this.BuildAction);
            }

            foreach (var prop in this.TemplateParameter)
            {
                propertyDictionary.Add(prop.Key, prop.Value);
            }

            return propertyDictionary;
        }
    }

    /// <summary>
    /// Predefined properties.
    /// </summary>
    public abstract class Property
    {
        public const string CopyToOutputDirectory = "CopyToOutputDirectory";
        public const string BuildAction = "BuildAction";
        public const string CustomTool = "CustomTool";
        public const string CanOverwriteExistingFile = "CanOverwriteExistingFile";
    }

    /// <summary>
    /// Predefined property values (CopyToOutputDirectory).
    /// </summary>
    public abstract class CopyToOutputDirectory
    {
        public const int DoNotCopy = 0;
        public const int CopyAlways = 1;
        public const int CopyIfNewer = 2;
    }

    /// <summary>
    /// Predefined property values (CanOverwriteExistingFile).
    /// </summary>
    public abstract class CanOverwriteExistingFile
    {
        public const bool Yes = true;
        public const bool No = false;
    }

    /// <summary>
    /// Predefined property values (BuildAction).
    /// </summary>
    public abstract class BuildAction
    {
        public const int None = 0;
        public const int Compile = 1;
        public const int Content = 2;
        public const int EmbeddedResource = 3;
    }

    /// <summary>
    /// Info wrapper of the generated files.
    /// </summary>
    public class GeneratedInfo
    {
        public List<FileToGenerate> FilesToGenerate { get; set; }

        public bool HasContent()
        {
            return this.FilesToGenerate != null && this.FilesToGenerate.Any();
        }
    }

    /// <summary>
    /// Info for a text generated file.
    /// </summary>
    public class FileToGenerate
    {
        public string Filename { get; set; }

        public string Project { get; set; }

        public string Path { get; set; }

        public Dictionary<string, object> Properties { get; set; }

        [JsonIgnore]
        public string AbsolutePath { get; set; }
    }

    /// <summary>
    /// Info for a binary generated file.
    /// </summary>
    public class TextFileToGenerate : FileToGenerate 
    {
        [JsonIgnore]
        public string Content { get; set; }
    }

    /// <summary>
    /// Info for a binary generated file.
    /// </summary>
    public class BinaryFileToGenerate : FileToGenerate 
    {
        [JsonIgnore]
        public byte[] BinaryContent { get; set; }
    }

    /// <summary>
    /// Logger for detailed information
    /// Note: NET 4 syntax to avoid errors in error list
    /// </summary>
    public class Logger
    {
        private readonly StringBuilder log;
        private readonly EnvDTE.DTE dte;
        private readonly string logSuffix;

        public Logger(EnvDTE.DTE dte, string suffix)
        {
            this.dte = dte;
            this.log = new StringBuilder();
            this.logSuffix = suffix;
        }
    
        public string Log
        {
            get
            {
                return this.log.ToString();
            }
        }

        public void Information(string info)
        {
            string line = string.Format("{0} {1} | {2}", DateTime.Now, this.logSuffix, info);
            this.WriteToOutput(line);
            this.log.AppendLine(line);
        }

        public void Information(string info, params object[] parameters)
        {
            string line = string.Format(info, parameters);
            this.Information(line);
        }

        private void WriteToOutput(string output)
        {
            if (dte == null)
            {
                return;
            }

            try
            {
                var window = dte.Windows.Item(EnvDTE.Constants.vsWindowKindOutput);
                var outputWindow = window.Object as EnvDTE.OutputWindow;
 
                outputWindow.ActivePane.Activate();
                outputWindow.ActivePane.OutputString(output);
                outputWindow.ActivePane.OutputString("\n");
            }
            catch (Exception ex)
            {
                this.log.AppendLine("WriteToOutput | Unable to obtain OutputWindow object");
                this.log.AppendLine(ex.StackTrace);
            }
        }
    }

    /// <summary>
    /// Options for configure T4FileManager in one place
    /// </summary>
    public class T4FileManagerOptions
    {
        /// <summary>
        /// Switch to write log of generation to main output file.
        /// </summary>
        /// <value>Default value is false.</value>
        public bool IsLogToMainOutputFileEnabled { get; set; } = false;
        /// <summary>
        /// Allow overwriting of files if it has already been generated.
        /// </summary>
        /// <value>Default value is true.</value>
        public bool CanOverwriteExistingFile { get; set; } = true;
        /// <summary>
        /// Automatic indentation of the code.
        /// </summary>
        /// <value>Default value is false.</value>
        public bool IsAutoIndentEnabled { get; set; } = false;
        
        /// <summary>
        /// Enable Placeholder-Content for main output file to avoiding generation of empty .cs file 
        /// and ignoring of the output extension directive in .net core projects.
        /// </summary>
        /// <value>Default value is true.</value>
        public bool IsNetCorePlaceholderContentEnabled { get; set; } = true;

        /// <summary>
        /// Automatic indentation of the code with ReSharper.
        /// </summary>
        /// <value>Default value is false.</value>
        public bool IsAutoCleanUpWithResharperEnabled { get; set; } = false;
        /// <summary>
        /// Encoding of text file.
        /// </summary>
        /// <value>Default value is UTF8 with BOM.</value>
        public System.Text.Encoding Encoding { get; set; } = Encoding.UTF8;

        /// <summary>
        /// Link generating files to template placeholder in solution.
        /// </summary>
        /// <value>Default value is false.</value>
        public bool LinkGeneratingFilesToTemplatePlaceholder { get; set; } = false;

        /// <summary>
        /// Link info.json file to solution.
        /// </summary>
        /// <value>Default value is false.</value>
        public bool LinkJsonFileToSolution { get; set; } = false;
        
        /// <summary>
        /// Empty template placeholder extention.
        /// </summary>
        /// <value>Default value is .txt4.</value>
        public string EmptyTemplatePlaceHolderExtention { get; set; } = ".txt4";

        /// <summary>
        /// Set default .txt extention to main output file.
        /// </summary>
        /// <value>Default value is true</value>
        public bool SetDefaultExtention { get; set; } = true;
    }

    /// <summary>
    /// For backward compatibility scenarios only
    /// </summary>
    public class TemplateFileManager : T4FileManager
    {
        public TemplateFileManager(GeneratedTextTransformation textTransformation)
        : base(textTransformation.GenerationEnvironment, textTransformation.Host, new T4FileManagerOptions()) {}

        public TemplateFileManager(StringBuilder textTransformation, ITextTemplatingEngineHost host)
        : base (textTransformation, host, new T4FileManagerOptions()) {}
    }
#>